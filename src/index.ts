require("dotenv").config();

import { allSettled, fork, root } from "effector-root";

import { socialCredit } from "./services/social-credit";

import { taskRunner } from "./common/task-runner";
import { createQueue } from "./lib/queue";
import { randomRange } from "./lib/random";

import { commandRateEvent, commandUnRateEvent } from "./services/command-rate";
import { messageEvent } from "./services/message";

import { bot } from "./bot";
import { connectDB } from "./db";

import "./lib/task-runner";
import "./init";

connectDB().then(() => bot.launch());

const queue = createQueue();

const scope = fork(root);

const commands = [
  { command: "rate", description: "–ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥" },
  { command: "unrate", description: "–ü–æ–Ω–∏–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥" },
  { command: "stat", description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã" },
  { command: "roll_dice", description: "–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É" },
  { command: "help", description: "–ü–æ–º–æ—â—å" },
];

bot.telegram.setMyCommands(commands);

bot.command("start", (ctx) => {
  ctx.reply("–í—Å—Ç–∞—é –Ω–∞ —Å–ª—É–∂–±—É –º–æ–π –º–∏–ª–æ—Ä–¥!");
});

bot.command("quit", (ctx) => {
  ctx.leaveChat();
});

bot.help((ctx) => {
  const help = [
    "–Ø –ù–∞–¥–∑–∏—Ä–∞—Ç–µ–ª—å, —è —Å–ª–µ–∂—É –∑–∞ –≤–∞—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n",
    "<b>–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥</b>\n",
    ...commands.map(
      ({ command, description }) => `/${command} - ${description}`
    ),
    '\n–í–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å <a href="https://t.me/addstickers/PoohSocialCredit">—Å—Ç–∏–∫–µ—Ä—ã</a>\n',
    "<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã</b>\n",
    "1. –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±–µ–∑ —Ä–µ–ø–ª–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞)",
    "2. –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å —Ä–µ–ø–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å—Å—è —Å–ø—É—Å—Ç—è 3 –º–∏–Ω—É—Ç—ã",
    "3. –ú–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–π—Ç–∏–Ω–≥–∞ —É –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–∞ —Ç–∞–π–º–∞—É—Ç –Ω–∞ 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã",
    "4. –ù–∞ –æ–¥–Ω–æ —Å–º—Å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∏ –æ–¥–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞",
  ].join("\n");

  ctx.reply(help, {
    parse_mode: "HTML",
  });
});

bot.command("stat", async (ctx) => {
  const chatId = ctx.chat.id;

  const users = await socialCredit.getTopUsersByRatingFx({ chatId });

  if (!users) {
    return ctx.reply(
      "–ß–µ—Ä—Ç, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∑–æ–≤–∏—Ç–µ –º–æ–∏—Ö –≥–æ—Å–ø–æ–¥–∏–Ω–æ–≤ @maximkoylo –∏ @DmitryPLSKN"
    );
  }

  if (users.length === 0) {
    return ctx.reply("–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
  }

  const usersList = users
    .map((user, index) => {
      const start = `${index + 1}.`;
      const end = `${user.rank}`.padEnd(20, " ");

      return `${start} ${end} ${user.name}`;
    })
    .join("\n");

  ctx.reply(`–†–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–ø–ø—ã:\n${usersList}`);
});

bot.command("roll_dice", (ctx) => {
  const variant = ["üé≤", "üéØ", "üèÄ", "üé≥", "üé∞"];

  ctx.telegram.sendDice(ctx.chat.id, {
    emoji: variant[randomRange(0, variant.length)],
    reply_to_message_id: ctx.message.message_id,
  });
});

bot.command("rate", (ctx) => {
  // if (ctx.chat.id === -1001379121758) return;

  queue.push(async () => {
    await allSettled(commandRateEvent, { scope, params: ctx.update.message });
  });
});

bot.command("unrate", (ctx) => {
  // if (ctx.chat.id === -1001379121758) return;

  queue.push(async () => {
    await allSettled(commandUnRateEvent, { scope, params: ctx.update.message });
  });
});

bot.on("message", (ctx) => {
  // if (ctx.chat.id === -1001379121758) return;

  queue.push(async () => {
    await allSettled(messageEvent, { scope, params: ctx.update.message });
  });
});

process.on("SIGUSR2", () => {
  taskRunner.save().then(() => {
    process.exit();
  });
});

process.once("SIGINT", () => {
  bot.stop("SIGINT");

  taskRunner.save().then(() => {
    process.exit();
  });
});

process.once("SIGTERM", () => {
  bot.stop("SIGTERM");

  taskRunner.save().then(() => {
    process.exit();
  });
});
